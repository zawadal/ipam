<?php

namespace AppBundle\Repository;

/**
 * OwnerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OwnerRepository extends \Doctrine\ORM\EntityRepository
{
    public function findLikeSearch($search, $type, $customer)
    {
             $qb = $this->getEntityManager()->createQueryBuilder();
             if($type)
             {
                $qb->select('u')
                       ->from('AppBundle:Owner', 'u')
                       ->innerJoin('u.customer', 'c')
                       ->where($qb->expr()->andX(
                                $qb->expr()->eq('c.id', ':customer'),
                                $qb->expr()->like('u.'.$type, ':search')
                               )
                        )     
                       ->setParameter('search','%'.$search.'%') 
                       ->setParameter('customer',$customer);  
             }
             else
             {
                  $qb->select('u')
                       ->from('AppBundle:Owner', 'u')
                       ->innerJoin('u.customer', 'c')
                       ->where($qb->expr()->andX(
                                $qb->expr()->eq('c.id', ':customer'),
                                $qb->expr()->orX(
                                   $qb->expr()->like('u.firstname', ':search'),
                                   $qb->expr()->like('u.lastname', ':search')
                               )
                        ))     
                       ->setParameter('search','%'.$search.'%') 
                       ->setParameter('customer',$customer);  
             }
            return $qb->getQuery()->getResult();     
             
             
    }
    
    public function findAllInContext($customer)
    {
             $qb = $this->getEntityManager()->createQueryBuilder();
             $qb->select('u')
                    ->from('AppBundle:Owner', 'u')
                    ->innerJoin('u.customer', 'c')
                    ->where($qb->expr()->eq('c.id', ':customer'))     
                    ->setParameter('customer',$customer);  
            return $qb->getQuery()->getResult();     
             
             
    }
}
