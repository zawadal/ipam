<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AddressRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AddressRepository extends EntityRepository
{

           public function findOldestInactiveAddress($ip, $network)
           {
               $time = new \DateTime;
               $oldestAddress = new Address();
               $addresslist = $this->findInactiveAddress($ip, $network);

               foreach ($addresslist as $address)
               {
                   if($address.getModifyDate() < $time)
                   {
                       $oldestAddress = $address;
                       $time = $address.getModifyDate();  
                   }
               }
               
           }
           public function findInactiveAddresses($ip, $network)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Address p WHERE p.ip = :ip AND p.network = :network AND p.active = false')
                 ->setParameter('ip', $ip)
                 ->setParameter('network', $network)
                 ->getResult();   
           }
           public function findActiveAddressByIp($ip, $network)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Address p WHERE p.ip = :ip AND p.network = :network AND p.active = true')
                 ->setParameter('ip', $ip)
                 ->setParameter('network', $network)
                 ->getOneOrNullResult();   
           }
           
           public function findAllActiveAddresses($network)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Address p WHERE p.network = :network AND p.active = true')
                 ->setParameter('network', $network)
                 ->getResult();   
           }
           public function findLike($network, $search)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Address p WHERE p.network = :network AND p.active = true AND p.ip LIKE :search')
                 ->setParameter('network', $network)
                 ->setParameter('search', '%'.$search.'%')    
                 ->getResult();   
           }
           public function getInactiveAddressesCount($ip, $network)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT count(p) FROM AppBundle:Address p WHERE p.ip = :ip AND p.network = :network AND p.active = false')
                 ->setParameter('ip', $ip)
                 ->setParameter('network', $network)
                 ->getSingleScalarResult();   
           }
           public function findFirstFreeIp($network, $schema)
           {
                $result = $this->getEntityManager()
                    ->createQuery(
                        'SELECT p FROM AppBundle:Address p WHERE p.network = :network AND p.active = true')
                    ->setParameter('network', $network)
                    ->getResult();
                foreach($schema as $schemaIP)
                {
                   $free = true;
                   foreach($result as $dbIP)
                   {
                       if($dbIP->getIp() == $schemaIP)
                       {
                          $free = false;
                       }
                       
                   }
                   if($free)
                   {
                       return $schemaIP;
                   }

                }
           }
           
           public function findAddressForDevice($device)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Address p WHERE p.device = :id AND p.active = true')
                 ->setParameter('id', $device)
                 ->getOneOrNullResult(); 
           }
           
           public function removeHistoryForDevice($device)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'DELETE AppBundle:Address p WHERE p.device = :id AND p.active = false')
                 ->setParameter('id', $device)
                 ->getResult();
           }
           
           public function findExclusion($ip, $networkid)
           {
             $qb = $this->getEntityManager()->createQueryBuilder();
             $qb->select('u')
                       ->from('AppBundle:Address', 'u')
                       ->innerJoin('u.network', 'n')
                       ->where($qb->expr()->andX(
                                $qb->expr()->eq('u.ip', ':ip'),
                                $qb->expr()->eq('u.excluded', true),
                                $qb->expr()->eq('u.active', true),
                                $qb->expr()->eq('n.id', ':networkid')
                               )
                        )     
                       ->setParameter('ip',$ip) 
                       ->setParameter('networkid',$networkid);  
             return $qb->getQuery()->getResult();     
           }
           
           public function findGwForNetwork($network)
           {
             return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Address p JOIN p.network n WHERE p.gw = true AND n.id = :network AND p.active = true')
                 ->setParameter('network', $network)
                 ->getOneOrNullResult(); 
           }
}
    