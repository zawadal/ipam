<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Network;
use AppBundle\Entity\Customer;

/**
 * NetworkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NetworkRepository extends EntityRepository
{   
    public function findAllJson()
    {
        return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p.id, p.net, p.netmask, p.description, p.maxHosts,p.addDate, p.IPAMutilization, p.DHCPDynamicUtilization, p.DHCPReservedUtilization  FROM AppBundle:Network p')
                 ->getResult();   
    }
    public function save(Network $network)
    {
        $em = $this->getEntityManager();
        $em->persist($network);
        $em->flush($network);
        return $network;
    }
   public function findLikeSearch($search, $customer)
    {
         $qb = $this->getEntityManager()->createQueryBuilder();
         $qb->select('u')
                    ->from('AppBundle:Network', 'u')
                    ->innerJoin('u.customer', 'c')
                    ->where($qb->expr()->andX(
                           $qb->expr()->eq('c.id', ':customer'),
                           $qb->expr()->like('u.net', ':search')
                     ))      
                    ->setParameter('search','%'.$search.'%')
                    ->setParameter('customer', $customer);
        return $qb->getQuery()->getResult();
        
    }

  public function incrementUtilization($type, $network)
  {
        $em = $this->getEntityManager();
        $entity = $em->GetRepository('AppBundle:Network')->find($network);
        switch($type)
        {
            case 1: $entity->SetIPAMutilization($entity->GetIPAMutilization()+1);
                    break;
            case 2: $entity->SetDHCPReservedUtilization($entity->GetDHCPReservedUtilization()+1);
                    break;
            case 3: $entity->SetDHCPDynamicUtilization($entity->GetDHCPDynamicUtilization()+1);
                    break;
                
        }
        $em->flush();
        return round(((($entity->GetDHCPDynamicUtilization()+$entity->GetDHCPReservedUtilization()+$entity->GetIPAMutilization())*100)/$entity->GetMaxHosts()), 2);
  }
  public function decrementUtilization($type, $network)
  {
        $em = $this->getEntityManager();
        $entity = $em->GetRepository('AppBundle:Network')->find($network);
        switch($type)
        {
            case 1: $entity->SetIPAMutilization($entity->GetIPAMutilization()-1);
                    break;
            case 2: $entity->SetDHCPReservedUtilization($entity->GetDHCPReservedUtilization()-1);
                    break;
            case 3: $entity->SetDHCPDynamicUtilization($entity->GetDHCPDynamicUtilization()-1);
                    break;
                
        }
        $em->flush();
        return round(((($entity->GetDHCPDynamicUtilization()+$entity->GetDHCPReservedUtilization()+$entity->GetIPAMutilization())*100)/$entity->GetMaxHosts()), 2);
  }
    public function findForCustomer($customer)
    {
        return $this->getEntityManager()
                 ->createQuery(
                     'SELECT p FROM AppBundle:Network p JOIN p.customer a WHERE a.id = :id')
                 ->setParameter("id", $customer)
                 ->getResult();   
    }         
}
